{"version":3,"sources":["components/Filter/filter.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","views/Contacts.jsx"],"names":["module","exports","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","contactsSelector","getContacts","onSubmit","e","preventDefault","some","contact","toast","error","contactsOperation","addContact","value","onChange","currentTarget","maxLength","type","pattern","title","required","Filter","filter","getFilter","className","s","input","changeFilter","target","ContactList","map","onClick","deleteContact","id","ContactsView","isLoadingContact","getLoading","useEffect","fetchContacts"],"mappings":"yJACAA,EAAOC,QAAU,CAAC,MAAQ,wB,4ICSX,SAASC,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAWC,cACXC,EAAWC,YAAYC,IAAiBC,aAc5C,OACE,mCACE,uBAAMC,SAdS,SAACC,GACpBA,EAAEC,iBAEGN,EAASO,MAAK,SAACC,GAAD,OAAad,IAASc,EAAQd,QAC7Ce,IAAMC,MAAM,+JAGdZ,EAASa,IAAkBC,WAAWlB,EAAME,IAC5CD,EAAQ,IACRE,EAAU,MAKR,UACE,yCAEE,uBACAgB,MAAOnB,EACPoB,SAAU,SAAAT,GAAC,OAAEV,EAAQU,EAAEU,cAAcF,QACnCG,UAAU,KACVC,KAAK,OACLvB,KAAK,OACLwB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,2CAEE,uBACEP,MAAOjB,EACPkB,SAAU,SAAAT,GAAC,OAAIR,EAAUQ,EAAEU,cAAcF,QACzCI,KAAK,MACLvB,KAAK,SACLwB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAIZ,wBAAQH,KAAK,SAAb,8B,sBCrDK,SAASI,IACxB,IAAMC,EAASrB,YAAYC,IAAiBqB,WACtCzB,EAAWC,cAEf,OACE,0DAEE,uBACEyB,UAAWC,IAAEC,MACbT,KAAK,OACLJ,MAAOS,EACPR,SAAU,SAAAT,GAAC,OAAIP,EAAS6B,YAAatB,EAAEuB,OAAOf,c,YCVvC,SAASgB,IACxB,IAAM/B,EAAWC,cACXC,EAAWC,YAAYC,IAAiBC,aAE5C,OACE,6BACGH,EAAS8B,KAAI,SAACtB,GAAD,OACZ,+CAAyBA,GAAzB,cACG,4BAAIA,EAAQd,OACZ,4BAAIc,EAAQZ,SACb,wBAAQmC,QAAS,kBAAMjC,EAASa,IAAkBqB,cAAcxB,EAAQyB,MAAxE,uBAHOzB,EAAQyB,SCLV,SAASC,IACpB,IAAMpC,EAAWC,cACXoC,EAAmBlC,YAAYC,IAAiBkC,YAMtD,OAJAC,qBAAU,WACNvC,EAASa,IAAkB2B,mBAC5B,CAACxC,IAGD,gCACEqC,GAAoB,2FACjB,2CAEA,8CACA,cAAC3C,EAAD,IACA,0CACA,cAAC6B,EAAD,IACA,cAACQ,EAAD","file":"static/js/4.00065bd3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2r32I\"};","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\n// import Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport {contactsOperation, contactsSelector} from '../../redux/contacts';\r\n\r\n\r\n\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch()\r\n  const contacts = useSelector(contactsSelector.getContacts)\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n      if(contacts.some((contact) => name === contact.name)) {\r\n        toast.error(\"Такой контакт уже существует!\");\r\n        return;\r\n      }\r\n      dispatch(contactsOperation.addContact(name, number))\r\n      setName('');\r\n      setNumber('');\r\n  };\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={handleSubmit}>\r\n          <label>\r\n            Name\r\n            <input\r\n            value={name}\r\n            onChange={e=>setName(e.currentTarget.value)}\r\n              maxLength=\"22\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Number\r\n            <input\r\n              value={number}\r\n              onChange={e => setNumber(e.currentTarget.value)}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n    }\r\n","import s from \"./filter.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {contactsSelector, changeFilter} from '../../redux/contacts'\r\n\r\n\r\nexport default function Filter() {\r\nconst filter = useSelector(contactsSelector.getFilter)\r\nconst dispatch = useDispatch()\r\n\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={e => dispatch(changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n","// import s from \"./contact.module.css\";\r\nimport {contactsOperation, contactsSelector} from '../../redux/contacts'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n\r\n\r\nexport default function ContactList() {\r\nconst dispatch = useDispatch()\r\nconst contacts = useSelector(contactsSelector.getContacts)\r\n  \r\n  return (\r\n    <ul>\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id} {...contact}>\r\n           <p>{contact.name}</p>\r\n           <p>{contact.number}</p>\r\n          <button onClick={() => dispatch(contactsOperation.deleteContact(contact.id))}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import {useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ContactForm from '../components/ContactForm'\r\nimport Filter from '../components/Filter'\r\nimport ContactList from '../components/ContactList';\r\nimport { contactsOperation, contactsSelector } from '../redux/contacts';\r\n\r\n\r\nexport default function ContactsView() {\r\n    const dispatch = useDispatch();\r\n    const isLoadingContact = useSelector(contactsSelector.getLoading)\r\n\r\n    useEffect(() => {\r\n        dispatch(contactsOperation.fetchContacts())\r\n    }, [dispatch])\r\n\r\n    return (\r\n       <div>\r\n        {isLoadingContact && <h1>Загружаем...</h1>}\r\n            <h1>Phonebook</h1>\r\n            \r\n            <h3>Add contacts</h3>\r\n            <ContactForm />\r\n            <h3>Contacts</h3>\r\n            <Filter />\r\n            <ContactList />\r\n       </div>\r\n    )\r\n}"],"sourceRoot":""}